#! /usr/bin/env python

import sys
from os import path
import re

# This part is lifted from six.py (https://pythonhosted.org/six/) to
# make sure that this script runs with Python 2 and Python 3

# True if we are running on Python 3.
PY3 = sys.version_info[0] == 3

if PY3:
    import builtins
    print_ = getattr(builtins, "print")
    del builtins
else:
    def print_(*args, **kwargs):
        """The new-style print function."""
        fp = kwargs.pop("file", sys.stdout)
        if fp is None:
            return
        def write(data):
            if not isinstance(data, basestring):
                data = str(data)
            fp.write(data)
        want_unicode = False
        sep = kwargs.pop("sep", None)
        if sep is not None:
            if isinstance(sep, unicode):
                want_unicode = True
            elif not isinstance(sep, str):
                raise TypeError("sep must be None or a string")
        end = kwargs.pop("end", None)
        if end is not None:
            if isinstance(end, unicode):
                want_unicode = True
            elif not isinstance(end, str):
                raise TypeError("end must be None or a string")
        if kwargs:
            raise TypeError("invalid keyword arguments to print()")
        if not want_unicode:
            for arg in args:
                if isinstance(arg, unicode):
                    want_unicode = True
                    break
        if want_unicode:
            newline = unicode("\n")
            space = unicode(" ")
        else:
            newline = "\n"
            space = " "
        if sep is None:
            sep = space
        if end is None:
            end = newline
        for i, arg in enumerate(args):
            if i:
                write(sep)
            write(arg)
        write(end)

hgbranch=None

from subprocess import Popen,PIPE
try:
    output = Popen(["HGRCPATH=", "hg", "branch"], stdout=PIPE).communicate()[0]
    try:
        output=output.decode()
    except AttributeError:
        # Python 2. This is already a string
        pass
    isPackage = (output.find("debian")==0)
    hgbranch = str(output).strip()
except OSError:
    # there is no mercurial
    isPackage=False

readme=open(path.join(path.dirname(sys.argv[0]),"..","README"))

reldate="no date"
verstring="undefined"
extension=""

verline=re.compile("\*\* (.+) - version number : (.+)")

for l in readme.readlines():
    m=verline.match(l)
    if m:
        if isPackage and m.group(1).find("Next")==0:
            print_("Keeping the last real version number",verstring)
            continue
        reldate=m.group(1)
        grp=m.group(2).split()
        verstring=grp[0]
        extension=" ".join(grp[1:])

try:
    vmajor,vminor,vpatch=verstring.split(".")
except ValueError:
    vmajor,vminor=verstring.split(".")
    vpatch = 0

print_("Swak version is %s.%s.%s" % (vmajor,vminor,vpatch))

versionH=path.join(path.dirname(sys.argv[0]),
                   "..",
                   "Libraries",
                   "swak4FoamParsers",
                   "include",
                   "swakVersion.H")

oldContent=open(versionH).read()

new=["// automatically generated by %s" % path.basename(sys.argv[0])]
new.append('#define SWAK_VERSION_STRING "%s"' % verstring)
new.append("#define SWAK_VERSION_MAJOR %s" % vmajor)
new.append("#define SWAK_VERSION_MINOR %s" % vminor)
new.append("#define SWAK_VERSION_PATCH %s" % vpatch)
new.append('#define SWAK_RELEASE_DATE "%s"' % reldate)
if extension!="":
    new.append('#define SWAK_VERSION_EXTENSION "%s"' % extension)
if hgbranch is not None and not reldate[0].isdigit():
    new.append('#define SWAK_HGBRANCH "%s"' % hgbranch)

newContent="\n".join(new)+"\n"

if newContent!=oldContent:
    print_("Contents of",versionH,"differ ... writing")
    open(versionH,"w").write(newContent)
