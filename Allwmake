#! /bin/bash

echo "Current OpenFOAM version is $WM_PROJECT_VERSION."
if [ -e foamVersionThisIsCompiledFor ]; then
    prevVersion=$(<foamVersionThisIsCompiledFor)
    echo "Previously compiled for OpenFOAM ($prevVersion)"
    if [ "$WM_PROJECT_VERSION" != "$prevVersion" ]
    then
        echo "Different than current OpenFOAM ($WM_PROJECT_VERSION) version."
        echo "   Use ./Allwclean before compiling"
        exit 42
    fi
    unset prevVersion
else
    echo "This is a clean install"
    echo $WM_PROJECT_VERSION >foamVersionThisIsCompiledFor
fi

swakDir=$(pwd)
requirementsBin=$swakDir/privateRequirements/bin

if [ -e $requirementsBin ];
then
    echo
    echo "$requirementsBin existing. Prepending to PATH-variable (private version of Bison)"
    echo
    export PATH=$requirementsBin:$PATH
fi

if [ -e swakConfiguration ]; then
    echo "Reading variables from 'swakConfiguration'"
    source swakConfiguration
else
    echo "No file 'swakConfiguration'. Python etc won't work. See README for details"
    echo "Try 'ln -s swakConfiguration.automatic swakConfiguration' for automatic configuration. BEWARE: this does not work on some systems"
fi

. theFiles.sh

SOEXT=so

if [ `uname -s`=="Darwin" ]; then
    SOEXT=dylib
fi

for lib in ${SWAKLIBS[@]}
do
    if [ -e $FOAM_LIBBIN/lib$lib.$SOEXT ]; then
	echo "$FOAM_LIBBIN/lib$lib.$SOEXT shadows library that will be compiled. This might break the compilation of the utilities"
	if [ -z $I_KNOW_THE_RISCS ]; then
	    echo "Set the environment variable I_KNOW_THE_RISCS if you want to continue nevertheless"
	    exit 42
	fi
    fi
done

if [ -z $SWAK_DO_NOT_GENERATE_NEW_VERSION_FILE ]; then
    echo "Checking swak4Foam-version and generating file"
    ./maintainanceScripts/makeSwakVersionFile.py
else
    echo "Not generating new version file because SWAK_DO_NOT_GENERATE_NEW_VERSION_FILE is set"
fi
mercurialVersion=$(hg id)
if [ $? != 0 ]; then
    echo "Could not get version of the sources"
else
    echo "hg info: $mercurialVersion"
fi

BEARPATH=$(which bear)
if [[ $? == 0 ]]; then
    echo "Using ${BEARPATH} to build compilation database"
    export BEAR_COMPILE_PREFIX="bear --append --cdb=$(pwd)/compile_commands.json"
else
    echo "No 'bear' installed"
fi

(cd Libraries; wmake all )

if [ $? != 0 ]; then
    echo
    echo "Requirements for Library not satisfied. I see no sense in going on"
    echo "Check the README before you go on to ask. And search: Most likely your problem occurred to 5 other people before and has been solved on the MessageBoard"
    exit 42
fi

(
  #revert back to the default Gcc compiler, due to some problems that Icc has
  #with overly complex classes
  [ "$WM_COMPILER" = "Icc" ] && export WM_COMPILER=Gcc
  cd Utilities; $BEAR_COMPILE_PREFIX wmake all
)

# (cd Examples/tests/fluIntegration/libRegistered; wmake)

PROPOSED_SWAK4FOAM_SRC=`pwd`"/Libraries"

if [ -z $SWAK4FOAM_SRC ]; then
    echo
    echo
    echo "If you want to use swakCoded-function object or compile software based on swak set the environment variable SWAK4FOAM_SRC to $PROPOSED_SWAK4FOAM_SRC (most people will be fine without setting that variable)"
else
    if [ $SWAK4FOAM_SRC != $PROPOSED_SWAK4FOAM_SRC ]; then
	echo
	echo
	echo "The environment variable SWAK4FOAM_SRC has the value $SWAK4FOAM_SRC instead of the expected value $PROPOSED_SWAK4FOAM_SRC - Maybe it points to a different installation."
    fi
fi
