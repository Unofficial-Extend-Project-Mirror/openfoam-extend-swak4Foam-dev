/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     |-solver-|;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         2;

deltaT          0.00025;

writeControl    adjustableRunTime;  //timeStep; //adjustableRunTime;

writeInterval   0.002;   //10;  //0.02;

purgeWrite      0;

writeFormat     ascii;

writePrecision  7;

writeCompression yes;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxAlphaCo           0.1;

maxCo           0.1;

maxDeltaT       0.00025;

functions {
    // whoIsHere {
    //     type listRegisteredObjects;
    // }
    calculateInletVariables {
        type calculateGlobalVariables;
        outputControl timeStep;
        outputInterval 1;
        valueType patch;
        patchName top;
        toGlobalNamespace inletPos;
        toGlobalVariables (
            inletCenter
            inletRadius
            inletVelocity
        );
<!--(if foamFork!="extend")-->
        aliases {
            alpha1 alpha.water;
        }
<!--(end)-->
        variables (
            "r1=0.375*(max(pts().x)-min(pts().x));"
            //            "ratioR=0.2;"
            "ratioR=0.15;"
            //            "varR=0.5;"
            "varR=0.25;"
            "freqR=54;"
            "freqC=15;"
            "inletRadius=r1*ratioR*(1-varR*cos(freqR*time()));"
            "r0=r1*0.2*0.5;"
            "idealArea=inletRadius*inletRadius*pi;"
            "realArea=sum(area()*alpha1);"
            "currentArea=0.5*(realArea+idealArea);"
            //            "targetMassFlow=5*idealArea;"
            "targetMassFlow=5*r0*r0*pi;"
            "inletCenter=vector(r1*sin(10*time()),max(pos().y),r1*cos(freqC*time()));"
            "inletVelocity=targetMassFlow/currentArea;"
        );

        noReset true;

        // this allows alpha1 to be found when funkySetFields is called
        searchOnDisc true;
    }
    printInletRadius {
        type swakExpression;
        expression "inletRadius";
        verbose true;
        accumulations (average );
        valueType patch;
        patchName top;
        globalScopes ( inletPos );
        ignore_unimplemented_simpleFunctionObject::updateMesh true;
    }
    printInletPosition {
        $printInletRadius;
        expression "inletCenter";
    }
    printInletVelocity {
        $printInletRadius;
        expression "inletVelocity";
    }
    printActualVelocityAbs {
        $printInletRadius;
        accumulations (
            weightedAverage
            max
        );
        expression "mag(U)";
    }
    printActualVelocityNorm {
        $printInletRadius;
        accumulations (
            min
            weightedAverage
            max
        );
        expression "U & normal()";
    }
    printActualVelocityInternalAbs {
        $printActualVelocityAbs;
        expression "mag(internalField(U))";
    }
    printActualVelocityInternalNorm {
        $printActualVelocityNorm;
        expression "internalField(U) & normal()";
    }
    printActualVelocityInternalTang {
        $printActualVelocityInternalAbs;
        expression "mag(internalField(U)-(internalField(U) & normal())*normal())";
    }
    divergenceArea {
        type swakExpression;
<!--(if foamFork!="extend")-->
        aliases {
            alpha1 alpha.water;
        }
<!--(end)-->
        variables (
            "idealArea=inletRadius*inletRadius*pi;"
            "realArea=sum(area()*alpha1);"
        );
        expression "realArea-idealArea";
        verbose true;
        accumulations (average );
        valueType patch;
        patchName top;
        globalScopes ( inletPos );
        ignore_unimplemented_simpleFunctionObject::updateMesh true;
    }
    idealArea {
        $divergenceArea;
        variables ();
        expression "inletRadius*inletRadius*pi";
    }
    totalInMassflow {
        type swakExpression;
        verbose true;
        accumulations (average );
        valueType patch;
        patchName top;
<!--(if foamFork!="extend")-->
        aliases {
            alpha1 alpha.water;
        }
<!--(end)-->
        variables (
            "totalIn=totalIn+sum(alpha1*mag(U)*area()*deltaT());"
        );
        expression "totalIn";
        storedVariables (
            {
                name totalIn;
                initialValue "0";
            }
        );
        ignore_unimplemented_simpleFunctionObject::updateMesh true;
    }
    totalOutMassFlow {
        $totalInMassflow;
        patchName spill;
    }
    stepCount {
        $totalInMassflow;
        variables (
            "nr=nr+1;"
        );
        expression "nr";
        storedVariables (
            {
                name nr;
                initialValue "0";
            }
        );
    }
    totalAlpha {
        type swakExpression;
        verbose true;
        accumulations ( sum );
        valueType internalField;
<!--(if foamFork!="extend")-->
        aliases {
            alpha1 alpha.water;
        }
<!--(end)-->
        expression "vol()*alpha1";
        ignore_unimplemented_simpleFunctionObject::updateMesh true;
    }
}

libs (
    "libOpenFOAM.so"
    "libgroovyBC.so"
    "libswakFunctionObjects.so"
    "libsimpleSwakFunctionObjects.so"
    "libfieldFunctionObjects.so"
) ;

// ************************************************************************* //
