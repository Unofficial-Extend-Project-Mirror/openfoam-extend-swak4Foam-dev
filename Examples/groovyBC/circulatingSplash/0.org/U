/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    floor
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }
    top
    {
        type            groovyBC;
        globalScopes ( inletPos );
        aliases {
            alpha1 alpha.water;
        }
//         variables "r1=0.25*(max(pts().x)-min(pts().x));r2=r1*0.2*(1-0.5*cos(54*time()));";
//         valueExpression "(sqrt(pow(pos().x-r1*sin(10*time()),2)+pow(pos().z-r1*cos(15*time()),2))<r2) ? vector(0,-1,0) : vector(0,0,0)";
        // valueExpression "-(alpha1+internalField(alpha1))*0.5*normal()";
        valueExpression "mag(pos()-inletCenter)<inletRadius ? -normal()*inletVelocity : vector(0,0,0)";
        value           uniform (0 0 0);
    }
    spill
    {
        //        type groovyBC;
        aliases {
            alpha1 alpha.water;
        }
        valueExpression "vector(0,0,0)";
        gradientExpression "vector(0,0,0)";
        fractionExpression "(phi>0) ? ((alpha1>1e-3) ? 0 : 0.5) : 1";
        type            pressureInletOutletVelocity;
         phi             phi;
         value           uniform (0 0 0);
    }
    sideSpill
    {
        type symmetry;
    }
    atmosphere {
        // $spill;
        type slip;
    }
    sides
    {
//         type groovyBC;
//         valueExpression "vector(0,0,0)";
//         gradientExpression "vector(0,0,0)";
//         fractionExpression "(phi>0) ? ((alpha1>1e-3) ? 0 : 0.5) : 1";

//          type            pressureInletOutletVelocity;
//          phi             phi;
//          value           uniform (0 0 0);

        type            fixedValue;
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
