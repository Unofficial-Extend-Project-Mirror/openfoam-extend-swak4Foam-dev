/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         |-endTime-|;

deltaT          0.001;

writeControl    adjustableRunTime;

writeInterval   |-writeInterval-|;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression yes;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.5;
maxAlphaCo      0.5;

maxDeltaT       1;

libs (
    "libgroovyBC.so"
    "libsimpleSwakFunctionObjects.so"
    "libswakFunctionObjects.so"
    "libsimpleLagrangianFunctionObjects.so"
    "libswakCloudFunctionObjects.so"
);

functions {
    readTrap {
        type readAndUpdateFields;
        fields (
            trap
            wallDist
            escapeZone
        );
    }
    defineState {
        type addGlobalVariable;
        outputControl timeStep;
        outputInterval 1;

        globalScope outletState;
        globalVariables {
            closed {
                valueType scalar;
                value 0;
                isSingleValue yes;
            }
            airReachedOutletTime {
                valueType scalar;
                value -1;
                isSingleValue yes;
            }
            shutdownTime {
                valueType scalar;
                value 1;
                isSingleValue yes;
            }
        }
    }
    fraction {
        // paraview can't read the delayed variables stuff
        type expressionField;
        expression "1*alpha1";
        fieldName fraction;
        autowrite true;
        aliases {
            alpha1 alpha.water;
        }
    }
    velocity {
        // paraview can't read the delayed variables stuff
        type expressionField;
        expression "1*U";
        fieldName velocity;
        autowrite true;
    }
    createInterface
    {
        type createSampledSurface;
        outputControl timeStep;
        outputInterval 1;
        surfaceName interface;
        surface {
            type isoSurfaceCell;
            isoField fraction; // use instead of alpha1 to avoid surface at outlet
            isoValue |-surfaceThreshold-|;
            interpolate true;
        }
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
    }
    createMeasurment
    {
        type createSampledSet;
        outputControl timeStep;
        outputInterval 1;
        setName sensor;
        set {
            type cloud;
            axis x;
            points (
                (|-sensorX*geometryScaling-| |-sensorY*geometryScaling-| |-0.5*thickness*geometryScaling-|)
            );
        }
        writeSetOnConstruction true;
        autoWriteSet true;
        setFormat vtk;
    }
    height
    {
        type swakExpression;
        valueType surface;
        surfaceName interface;
        verbose true;
        expression "pos().y";
        accumulations (
            min
            max
            size
        );
        interpolationType cellPoint;
    }
    printStateSensor {
        type swakExpression;
        valueType set;
        setName sensor;
        expression "alpha1";
        accumulations (
            size
            average
        );
        globalScopes (
            outletState
        );
        verbose true;
        aliases {
            alpha1 alpha.water;
        }
    }
    openIfSensorReached {
        type calculateGlobalVariables;
        valueType set;
        setName sensor;
        toGlobalNamespace outletState;
        globalScopes (
            outletState
        );
        set {
            type swakRegistryProxy;
            axis y;
            setName sensor;
        }
        toGlobalVariables (
            closed
            airReachedOutletTime
        );
        variables (
            "state=average(alpha1);"
            "thresA=0.9;"
            "opening=(closed>0.5 && state>thresA) ? 1 : 0;"
            "closed=(opening>0.5) ? 0 : closed;"
            "airReachedOutletTime=(opening>0.5) ? -1 : average(airReachedOutletTime);"
        );
        aliases {
            alpha1 alpha.water;
        }
    }
    closeIfBottomReached {
        type calculateGlobalVariables;
        valueType surface;
        surfaceName interface;
        toGlobalNamespace outletState;
        globalScopes (
            outletState
        );
        toGlobalVariables (
            closed
            airReachedOutletTime
        );
        variables (
            "minHeight=min(pos().y);"
            "thresY=-|-outDepth*geometryScaling*outletThreshold-|;"
            "reached=(closed<0.5 && minHeight<thresY && airReachedOutletTime<0)?1:0;"
            "closing=(airReachedOutletTime>=0 && (airReachedOutletTime+shutdownTime)<time())?1:0;"
            "airReachedOutletTime=reached>0.5 ? time() : airReachedOutletTime;"
            "closed=closing>0.5 ? 1 : closed;"
            "airReachedOutletTime=closing>0.5 ? -1 : airReachedOutletTime;"
        );
        interpolationType cellPoint;
    }
    muField {
        type expressionField;
        expression "nu*rho";
        fieldName muField;
        autowrite true;
    }
    dirt {
        type evolveKinematicCloud;
        cloudName dirt;
        rhoName rho;
        UName U;
        muName muField;
    }
    dirtHeight {
        type swakExpression;
        accumulations (
            min
            average
            weightedAverage
            max
        );
        verbose true;
        valueType cloud;
        expression "pos().y";
        cloudName dirt;
    }
    printStateClosed {
        $printStateSensor;
        expression "closed";
    }
    printStateWaitingForShut {
        $printStateSensor;
        expression "average(airReachedOutletTime)>=0 ? 1 : 0";
    }
    patchFlows {
        type patchExpression;
        patches (
            inlet
            outlet
        );
        verbose true;
        expression "mag(sum(normal()&U*alpha1*area()))";
        accumulations (
            average
        );
        aliases {
            alpha1 alpha.water;
        }
    }
    outVelocity {
        type patchExpression;
        patches (
            outlet
        );
        verbose true;
        expression "U.y";
        accumulations (
            min
            max
            average
        );
    }
    inVelocity {
        type patchExpression;
        patches (
            inlet
        );
        verbose true;
        expression "U & normal()";
        accumulations (
            min
            max
            average
        );
    }
    reflowTracer {
        type solveTransportPDE;
        solveAt timestep;
        fieldName tracer;
        steady false;
        // rho "rho" [1 -3 0 0 0 0 0];
        // diffusion "1e-4" [1 -1 -1 0 0 0 0];
        // source "-tracer*(1-alpha1)*rho" [1 -3 -1 0 0 0 0];
        // phi "interpolate(rho)*phi" [1 0 -1 0 0];
        rho "1" [0 0 0 0 0 0 0];
        diffusion "1e-6" [0 2 -1 0 0 0 0];
        source "0" [0 0 -1 0 0 0 0];
        phi "phi" [0 3 -1 0 0];
    }
    fixTracer {
        type manipulateField;

        outputControl   timeStep;
        outputInterval  1;

        fieldName tracer;

        // expression "tracer*alpha1";
        // mask "true";

        expression "0";
        mask "alpha1<0.01";
        aliases {
            alpha1 alpha.water;
        }
    }
    tracerFraction {
        type swakExpression;
        accumulations (
            min
            max
            average
        );
        verbose true;
        valueType internalField;
        expression "tracer";
    }
    tracerAmount {
        $tracerFraction;
        accumulations (
            sum
        );
        expression "vol()*alpha1*tracer/sumAlpha";
        variables (
            "sumAlpha=sum(vol()*alpha1);"
        );
        aliases {
            alpha1 alpha.water;
        }
    }
};

profiling
{
    active      true;
    cpuInfo     true;
    memInfo     false;
    sysInfo     true;
}

// ************************************************************************* //
