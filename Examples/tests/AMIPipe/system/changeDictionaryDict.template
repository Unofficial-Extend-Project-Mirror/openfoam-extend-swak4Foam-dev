/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      changeDictionaryDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

$$ oldFormat=foamFork!="openfoamplus" and ((foamFork not in ["openfoam"]) or (foamFork=="openfoam" and foamVersion<(4,)))

<!--(if oldFormat)-->
dictionaryReplacement
{
<!--(end)-->
    boundary
    {
        intersect1
        {
            type            cyclicAMI;

            inGroups
                2
                (
                    cyclicAMI
                    intersect1Group
                )
                ;
            matchTolerance  0.0001;
            transform       noOrdering;
            neighbourPatch  intersect1_slave;
            shadowPatch     $neighbourPatch;
            bridgeOverlap   true;
            zone intersect1_Zone;
        }
        intersect1_slave
        {
            type            cyclicAMI;
            inGroups
                2
                (
                    cyclicAMI
                    intersect1Group
                )
                ;
            matchTolerance  0.0001;
            neighbourPatch  intersect1;
            shadowPatch     $neighbourPatch;
            transform       noOrdering;
            bridgeOverlap   true;
            zone intersect1_slave_Zone;
        }
        intersect2
        {
            type            cyclicAMI;

            inGroups
                2
                (
                    cyclicAMI
                    intersect2Group
                )
                ;
            matchTolerance  0.0001;
            transform       noOrdering;
            neighbourPatch  intersect2_slave;
            shadowPatch     $neighbourPatch;
            bridgeOverlap   true;
            zone intersect2_Zone;
        }
        intersect2_slave
        {
            type            cyclicAMI;
            inGroups
                2
                (
                    cyclicAMI
                    intersect2Group
                )
                ;
            matchTolerance  0.0001;
            neighbourPatch  intersect2;
            transform       noOrdering;
            shadowPatch     $neighbourPatch;
            bridgeOverlap   true;
            zone intersect2_slave_Zone;
        }
    }
<!--(if oldFormat)-->
}
<!--(end)-->
