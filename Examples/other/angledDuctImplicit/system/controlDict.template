/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     rhoPorousSimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         100;

deltaT          1;

writeControl    timeStep;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression yes;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

functions
{
    // whatIsThere {
    //     type listRegisteredObjects;
    // }
    pressureDrop
    {
        type patchExpression;
        variables ( " pO ut { patch ' outlet } = sum ( p*area())/ sum(area()) ; ");
        accumulations (
            average
        );
        patches (
            inlet
        );
        expression "p-pOut";
        verbose true;
    }
    pressureAverage
    {
        type patchAverage;
        fields (
            p
        );
        patches (
            inlet
            //            outlet
        );
        verbose true;
    }
    ifUser {
        type executeIfEnvironmentVariable;
        readDuringConstruction false;

        //        fitVariableMode exists;
        //        fitVariableMode doesNotExist;
        fitVariableMode fitsRegexp;

        //        writeDebug true;
        variableName USER;
        contentRegexp"[a-z]+";
        //        contentRegexp"[c-z]+";

        functions {
            pressureDropCSV
            {
                $pressureDrop;

                outputFileMode csv;
            }
        }
    }
    velocityFormats {
        type functionObjectListProxy;
        //        writeDebug true;
        readDuringConstruction true;

        functions {
            velocityCSV
            {
                type patchExpression;
                accumulations (
                    min
                    max
                    average
                );
                expression "U";
                patches (
                    outlet
                );
                outputFileMode csv;
                //             verbose true;
            }
            velocityRaw
            {
                $velocityCSV;
                outputFileMode raw;
            }
            velocityFoam
            {
                $velocityCSV;
                outputFileMode foam;
            }
        }
    }
    averagePressure
    {
        type swakExpression;
        valueType internalField;
        verbose true;
        expression "p*vol()/sum(vol())";
        accumulations (
            sum
        );
    }
    averagePressure2 {
        $averagePressure;
        expression "p";
        accumulations (
            weightedAverage
            average
        );
    }
    patchAveragePressure
    {
        type patchExpression;
        patches (
            wall
        );
        verbose true;
        expression "p*area()/sum(area())";
        accumulations (
            sum
        );
    }
    patchAveragePressure2 {
        $patchAveragePressure;
        expression "p";
        accumulations (
            weightedAverage
            average
        );
    }
    pressureToFilterVolAvg
    {
        type patchExpression;
        variables ( "pFilter{cellZone'porosity}=sum(p*vol())/sum(vol());");
        accumulations (
            average
        );
        patches (
            inlet
            outlet
        );
        expression "p-pFilter";
        verbose true;
    }
    pressureToVol
    {
        type patchExpression;
        variables ( "pTotal{internalField}=sum(p*vol())/sum(vol());");
        accumulations (
            average
        );
        patches (
            inlet
            outlet
        );
        expression "p-pTotal";
        verbose true;
    }
    pressureToInlet
    {
        $pressureToVol;
        type swakExpression;
        valueType faceSet;
        setName inletPatch;
        autoInterpolate true;
    }
    pressureToInletHalf {
        $pressureToInlet;
        setName halfInlet;
    }
    pressureToFilter
    {
        type patchExpression;
        variables "pFilter{cellZone'porosity}=average(p);";
        accumulations (
            average
        );
        patches (
            inlet
            outlet
        );
        expression "p-pFilter";
        verbose true;
    }
    distanceToFilter
    {
        type patchExpression;
        variables "pFilter{cellZone'porosity}=average(pos());";
        accumulations (
            average
        );
        patches (
            inlet
            outlet
        );
        expression "mag(pos()-pFilter)";
        verbose true;
    }
    alternatePressureToFilter
    {
        type swakExpression;
        valueType patch;
        patchName outlet;
        variables "pFilter{cellZone'porosity}=average(p);";
        accumulations (
            average
        );
        expression "p-pFilter";
        verbose true;
    }
    alternatePressureToFilter2
    {
        type swakExpression;
        valueType cellZone;
        zoneName porosity;
        variables "pRaus{outlet}=average(p);";
        accumulations (
            average
            //            weightedAverage
        );
        expression "pRaus-p";
        verbose true;
    }
    alternatePressureToFilter3
    {
        type swakExpression;
        valueType cellSet;
        setName porosity;
        variables "pRaus{outlet}=average(p);";
        accumulations (
            average
        );
        expression "pRaus-p";
        verbose true;
    }
    alternatePressureToFilter4
    {
        type swakExpression;
        valueType patch;
        patchName outlet;
        variables "pFilter{cellSet'porosity}=average(p);";
        accumulations (
            average
        );
        expression "p-pFilter";
        verbose true;
    }
    pressureInletToFilter
    {
        type swakExpression;
        valueType patch;
        patchName inlet;
        variables "pBefore{faceZone'beforeFilter}=average(p);";
        accumulations (
            average
        );
        expression "p-pBefore";
        verbose true;
        autoInterpolate true;
        warnAutoInterpolate false;
    }
    pressureOverFilter
    {
        type swakExpression;
        valueType faceZone;
        zoneName beforeFilter;
        variables (
            "pAfter{faceSet'afterFilter}=average(p);"
        );
        accumulations (
            average
        );
        expression "p-pAfter";
        verbose true;
        autoInterpolate true;
        warnAutoInterpolate false;
    }
    pressureFilterToOutlet
    {
        type swakExpression;
        valueType patch;
        patchName outlet;
        variables (
            "dummy=p-mag(U);"
            "pAfter{faceSet'afterFilter}=average(p);"
        );
        accumulations (
            average
        );
        expression "pAfter-p";
        verbose true;
        autoInterpolate true;
        warnAutoInterpolate false;
    }
    flowBeforeSet
    {
        type swakExpression;
        valueType faceSet;
        setName beforeFilter;
        expression "phi*flip()";
        accumulations (
            sum
        );
        verbose true;
    }
    flowAfterSet
    {
        type swakExpression;
        valueType faceSet;
        setName afterFilter;
        expression "phi*flip()";
        accumulations (
            sum
        );
        verbose true;
    }
    flowBeforeZone
    {
        type swakExpression;
        valueType faceZone;
        zoneName beforeFilter;
        expression "phi*flip()";
        accumulations (
            sum
        );
        verbose true;
    }
    flowAfterZone
    {
        type swakExpression;
        valueType faceZone;
        zoneName afterFilter;
        expression "phi*flip()";
        accumulations (
            sum
        );
        verbose true;
    }
    flowInlet
    {
        type swakExpression;
        valueType patch;
        patchName inlet;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
    flowOutlet
    {
        type swakExpression;
        valueType patch;
        patchName outlet;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
    filterMeanDiff
    {
        type swakExpression;
        valueType internalField;
        variables "pFilter{cellZone'porosity}=sum(p*vol())/sum(vol());";
        expression "p-pFilter";
        accumulations (
            min
            max
        );
        verbose true;
    }
    velocityExtreme
    {
        type swakExpression;
        valueType internalField;
        accumulations (
            min
            max
        );
        expression "mag(U)";
        verbose true;
    }
    surfacePlane
    {
        type swakExpression;
        valueType surface;
        surfaceName testPlane;
        surface {
            type plane;
            basePoint       (0.0001 0.0001 0.0001);
            normalVector    (0 0 1);
            planeType pointAndNormal;
            pointAndNormalDict {
                point $..basePoint;
                normal $..normalVector;
            }
            interpolate false;
        }
        verbose true;
        expression "mag(U)";
        accumulations (
            min
            max
        );
        interpolationType cell;
    }
    surfacePlaneReuse
    {
        type swakExpression;
        valueType surface;
        surfaceName testPlane;
        verbose true;
        expression "p";
        accumulations (
            min
            max
        );
        interpolationType cell;
    }
    surfacePlaneMaxU
    {
        type swakExpression;
        valueType surface;
        surfaceName testPlane;
        verbose true;
        variables (
            "maxU=(maxU<mag(U)) ? mag(U) : maxU;"
        );
        storedVariables (
            {
                name maxU;
                initialValue "0";
            }
        );
        expression "maxU";
        accumulations (
            average
            max
            min
        );
        interpolationType cell;
    }
    testPlaneArea
    {
        type expressionField;
        outputControl outputTime;
        //        outputInterval 1;
        fieldName testPlaneArea;
        expression "surfaceArea(testPlane)";
        autowrite true;
    }
    createsurfacePlane2
    {
        type createSampledSurface;
        outputControl timeStep;
        outputInterval 1;
        surfaceName testPlane2;
        surface {
            type plane;
            basePoint       (0 0 0);
            normalVector    (0 0 1);
            planeType pointAndNormal;
            pointAndNormalDict {
                point $..basePoint;
                normal $..normalVector;
            }
            interpolate true;
        }
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
    }
    surfacePlane2
    {
        type swakExpression;
        valueType surface;
        surfaceName testPlane2;
        verbose true;
        expression "mag(U)";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    surfaceDiffPlane
    {
        type swakExpression;
        valueType surface;
        surfaceName testPlane3;
        surface {
            type plane;
            basePoint       (0 0 0.01);
            normalVector    (0 0 1);
            planeType pointAndNormal;
            pointAndNormalDict {
                point $..basePoint;
                normal $..normalVector;
            }
            interpolate true;
            interpolationType cell;
        }
        verbose true;
        variables "Umiddle{surface'testPlane2}=sum(mag(U)*area())/sum(area());";
        expression "sum(mag(U)*area())/sum(area())-Umiddle";
        accumulations (
            min
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    surfacePatch
    {
        type swakExpression;
        valueType surface;
        surfaceName testPatch;
        surface {
            type patch;
            patches ( outlet );
            patchName outlet;
            //            triangulate      false;
        }
        verbose true;
        expression "mag(U)";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    surfaceCuttingPlane
    {
        type swakExpression;
        valueType surface;
        surfaceName testCuttingPlane;
        surface {
            type cuttingPlane;
            planeType       pointAndNormal;
            pointAndNormalDict
            {
                basePoint       (0 0 0);
                normalVector    (0 0 1);
            }
            interpolate false;
        }
        verbose true;
        expression "mag(U)";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    createThrePointSet
    {
        type createSampledSet;
        outputControl timeStep;
        outputInterval 1;
        setName threePoints;
        set {
<!--(if foamFork=="openfoam" and foamVersion>(5,99))-->
            type points;
<!--(else)-->
            type cloud;
<!--(end)-->
            axis x;
            points (
                (0.1 0.14 0.0001)
                (0.0 0.02 0.0001)
                (-0.1 0.02 0.0001)
            );
            ordered true;
        }
        writeSetOnConstruction true;
        autoWriteSet true;
<!--(if foamFork=="extend")-->
        setFormat raw;
<!--(else)-->
        setFormat vtk;
<!--(end)-->
    }
    onlyHighPressure {
        type executeIfSwakExpression;
        //        readDuringConstruction false;
        readDuringConstruction true;
        //        writeDebug true;

        valueType set;
        setName threePoints;
        variables (
            "pMin=min(p);"
            "pMax=max(p);"
        );

        logicalExpression "(pMax-pMin)>3000";
        logicalAccumulation and;

        functions {
            setsPressureProxy
            {
                // Currently not working because the proxy doesn't work
                type swakExpression;
                verbose true;
                valueType set;
                setName  threePointsCopy;
                expression "p";
                accumulations (
                    min
                    max
                    average
                );
                set {
                    type swakRegistryProxy;
                    axis x;
                    setName threePoints;
                }
            }
        }
    }
    setsPressureChangeProxy
    {
        // Currently not working because the proxy doesn't work
        type swakExpression;
        verbose true;
        valueType set;
        setName  threePointsCopy;
        expression "p-pInit";
        accumulations (
            min
            max
            average
        );
        set {
            type swakRegistryProxy;
            axis x;
            setName threePoints;
        }
        storedVariables (
            {
                name pInit;
                initialValue "p";
            }
        );
    }
    setsPressureChangeProxyInter
    {
        // Currently not working because the proxy doesn't work
        type swakExpression;
        verbose true;
        valueType set;
        setName  threePointsCopy2;
        expression "p-pInit";
        accumulations (
            min
            max
            average
        );
        set {
            type swakRegistryProxy;
            axis x;
            setName threePoints;
        }
        storedVariables (
            {
                name pInit;
                initialValue "p";
            }
        );
        interpolate true;
        interpolationType cellPoint;
    }
    setsPressureChange
    {
        type swakExpression;
        verbose true;
        valueType set;
        setName  threePointsOwn;
        expression "p-pInit";
        accumulations (
            min
            max
            average
        );
        set {
<!--(if foamFork=="openfoam" and foamVersion>(5,99))-->
            type points;
<!--(else)-->
            type cloud;
<!--(end)-->
            axis x;
            points (
                (0.1 0.14 0.0001)
                (0.0 0.02 0.0001)
                (-0.1 0.02 0.0001)
            );
            ordered false;
        }
        writeSetOnConstruction true;
        autoWriteSet true;
<!--(if foamFork=="extend")-->
        setFormat raw;
<!--(else)-->
        setFormat vtk;
<!--(end)-->
        storedVariables (
            {
                name pInit;
                initialValue "p";
            }
        );
    }
    distField
    {
        type expressionField;
        outputControl timeStep;
        outputInterval 1;
        fieldName distanceFromZero;
        expression "mag(pos())";
        autowrite true;
    }
    onlyForSolver {
        type executeIfExecutableFits;
        executableNameRegexp "rho.+Foam";
        //        writeDebug true;
        readDuringConstruction false;

        functions {
            myPhi
            {
                type expressionField;
                outputControl timeStep;
                outputInterval 1;
                fieldName myPhi;
                expression "interpolate(rho*U)&face()";
                autowrite true;
            }
            phiError
            {
                type swakExpression;
                valueType internalField;
                verbose true;
                expression "mag(phi-myPhi)";
                accumulations (
                    average
                    sum
                    max
                );
            }
            myPhi2
            {
                type expressionField;
                outputControl timeStep;
                outputInterval 1;
                fieldName myPhi2;
                expression "myPhi";
                autowrite true;
            }
            changeMyPhi2
            {
                type manipulateField;
                outputControl timeStep;
                outputInterval 1;
                fieldName myPhi2;
                expression "interpolate(0)";
                mask "fpos().x<interpolate(0)";
            }
            clearPorosityWall
            {
                type manipulatePatchField;
                outputControl timeStep;
                outputInterval 1;
                fieldName myPhi;
                patchName porosityWall;
                expression "0";
                mask "mag(myPhi)>1e-8";
                writeManipulated true;
            }
        }
    }
    velocityClass
    {
        type expressionField;
        outputControl outputTime;
        //        outputInterval 1;
        fieldName velClass;
        lookuptables (
            {
                name velClass;
                outOfBounds clamp;
                fileName "$FOAM_CASE/velClass.data";
                file "$FOAM_CASE/velClass.data";
            }
        );
        expression "velClass(mag(U))";
        autowrite true;
        verbose true;
    }
    // whatIsThere {
    //     type listRegisteredObjects;
    // }
<!--(if foamFork!="extend")-->
    turbulence {
        type executeIfObjectExists;
        objectName k;
        checkType true;
        //        checkType false;
        objectType volScalarField;
        objectShouldExist true;
        //        writeDebug true;
        readDuringConstruction false;

        functions {
            yPlusField
            {
                type expressionField;
                outputControl timeStep;
                outputInterval 1;
                fieldName yPlus;
                aliases {
                    mu thermo:mu;
                }
                expression "pow(0.09,0.25)*sqr(k)*nearDist()/mu";
                autowrite true;
            }
            yPlusWall
            {
                type patchExpression;
                expression "pow(0.09,0.25)*sqr(k)*dist()/mu";
                aliases {
                    mu thermo:mu;
                }
                accumulations (
                    min
                    max
                    average
                );
                patches (wall);
                verbose true;
            }
        }
    }
<!--(end)-->
    surfaceIsoDist
    {
        type swakExpression;
        valueType surface;
        surfaceName testIsoDist;
        surface {
            type isoSurface;
            isoField distanceFromZero;
            isoValue 0.1;
            interpolate true;
        }
        verbose true;
        expression "mag(U)";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    surfaceIsoDist2
    {
        type swakExpression;
        valueType surface;
        surfaceName testIsoDist2;
        surface {
            type isoSurface;
            isoField distanceFromZero;
            isoValue 0.1;
            interpolate true;
        }
        verbose true;
        //        variables "p=pts();";
        expression "pos()";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    surfaceIsoInterpolateOn
    {
        type swakExpression;
        valueType surface;
        surfaceName testIsoInterpolateOn;
        surface {
            type isoSurface;
            isoField distanceFromZero;
            isoValue 0.1;
            interpolate true;
        }
        verbose true;
        //        variables "p=pts();";
        expression "p";
        accumulations (
            min
            max
        );
        interpolate on;
<!--(if foamFork=="openfoam" and foamVersion>(5,99))-->
        interpolationType cellPoint;
<!--(else)-->
        interpolationType cellPointWallModified;
<!--(end)-->
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
    }
    surfaceIsoInterpolateOff
    {
        type swakExpression;
        valueType surface;
        surfaceName testIsoInterpolateOff;
        surface {
            type isoSurface;
            isoField distanceFromZero;
            isoValue 0.1;
            interpolate true;
        }
        verbose true;
        //        variables "p=pts();";
        expression "p";
        accumulations (
            min
            max
        );
        interpolate off;
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    surfaceIsoDistCell
    {
        type swakExpression;
        valueType surface;
        surfaceName testIsoSurfaceCell;
        surface {
<!--(if foamFork=="openfoam" and foamVersion>6)-->
        type isoSurface;
<!--(else)-->
        type isoSurfaceCell;
<!--(end)-->
            isoField distanceFromZero;
            isoValue 0.1;
            interpolate false;
            //            regularise      false;
        }
        verbose true;
        expression "mag(U)";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    velocityMagnitude
    {
        type expressionField;
        outputControl timeStep;
        outputInterval 1;
        fieldName magU;
        expression "mag(U)";
        //        expression "mag(U)*sin(time())";
        autowrite true;
    }
    surfaceU45
    {
        type swakExpression;
        valueType surface;
        surfaceName testIsoU45;
        surface {
            type isoSurface;
            isoField magU;
            isoValue 45;
            interpolate true;
        }
        verbose true;
        //        variables "p=pts();";
        expression "pos()";
        // expression "U";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    surfaceU45b
    {
        type swakExpression;
        valueType surface;
        surfaceName testIsoU45b;
        surface {
<!--(if foamFork=="openfoam" and foamVersion>6)-->
        type isoSurface;
<!--(else)-->
        type isoSurfaceCell;
<!--(end)-->
            isoField magU;
            isoValue 45;
            interpolate true;
        }
        verbose true;
        //        variables "p=pts();";
        expression "pos()";
        // expression "U";
        accumulations (
            min
            max
        );
        writeSurfaceOnConstruction true;
        autoWriteSurface true;
        surfaceFormat vtk;
        interpolationType cell;
    }
    testSurfaceU45 {
        $testPlaneArea;
        fieldName testU45Iso;
        expression "surfaceArea(testIsoU45b)";
    }
    testSurfaceU45Relative {
        $testPlaneArea;
        fieldName testU45IsoRelative;
        expression "surfaceRelativeSurface(testIsoU45b)";
    }
    testSurfaceU45Dist {
        $testPlaneArea;
        fieldName testU45IsoDist;
        expression "surfaceDistance(testIsoU45b)";
    }
    testSurfaceU45Nr {
        $testPlaneArea;
        fieldName testU45IsoNr;
        expression "surfaceNrOfFacesInCell(testIsoU45b)";
    }
    testSurfaceU45Vel {
        $testPlaneArea;
        fieldName testU45IsoVel;
        expression "surfaceHasSurface(testIsoU45b) ? U : vector(0,0,0)";
    }
    testSurfaceU45pAverage {
        $testPlaneArea;
        fieldName testU45IsopAverage;
        expression "surfaceValueAverageScalar(testIsoU45b,p)";
    }
    testSurfaceU45pMinimum {
        $testPlaneArea;
        fieldName testU45IsopMinimum;
        expression "surfaceValueMinimumScalar(testIsoU45b,p)";
    }
    testSurfaceU45posAverage {
        $testPlaneArea;
        fieldName testU45IsoPosAverage;
        expression "surfaceValueAverageVector(testIsoU45b,pos())";
    }
    testSurfaceU45posMinimum {
        $testPlaneArea;
        fieldName testU45IsoPosMinimum;
        expression "surfaceValueMinimumVector(testIsoU45b,pos())";
    }
    testSurfaceU45posMaximum {
        $testPlaneArea;
        fieldName testU45IsoPosMaximum;
        expression "surfaceValueMaximumVector(testIsoU45b,pos())";
    }
    ifPythonExpressionFO {
        type executeIfFunctionObjectPresent;
        readDuringConstruction false;
        functionObjectName executeIfPython;

        functions {
            doEveryThreeSteps {
                type executeIfPython;
                readDuringConstruction false;
                parallelMasterOnly false;
                isParallelized true;

		initCode "";
                conditionCode "return abs(runTime % 3)<1e-5";
                //                conditionFile "$FOAM_CASE/test.py"


                //                writeDebug true;
                //                interactiveAfterExecute true;

                functions {
                    surfaceU45c
                    {
                        type swakExpression;
                        valueType surface;
                        surfaceName testIsoU45c;
                        surface {
                            type thresholdCellFaces;
                            field magU;
                            upperLimit 46;
                            lowerLimit 44;
                        }
                        verbose true;
                        //        variables "p=pts();";
                        expression "pos()";
                        // expression "U";
                        accumulations (
                            min
                            max
                        );
                        interpolationType cell;
                    }
                    writeSurfaceOnConstruction true;
                    autoWriteSurface true;
                    surfaceFormat vtk;
                }
            }
        }
    }
    pressureChangeInTime
    {
        // for some reason this is always 0

        type swakExpression;
        valueType internalField;
        expression "mag(ddt(p))";
        accumulations (
            average
            max
        );
        verbose true;
        prevIterIsOldTime true;
    }
    heatFluxField
    {
        type readAndUpdateFields;
        outputControl timeStep;
        outputInterval 1;
        fields (
            heatFlux
            heatFluxPoint // just to test point fields
        );
    }
    totalHeatFlux
    {
        // zero because of the boundary conditions

        type patchIntegrate;
        fields (
            heatFlux
        );
        patches (
            front
            back
            wall
            porosityWall
        );
        verbose true;
    }
    createMinMaxLineSet
    {
        type createSampledSet;
        outputControl timeStep;
        outputInterval 1;
        setName fromMinToMax;
        set {
<!--(if foamFork=="openfoam" and foamVersion>(5,99))-->
            type lineUniform;
<!--(else)-->
            type uniform;
<!--(end)-->
            axis distance;
            start (-0.01 0 -0.025);
            end (0.141421 0.176777 0.025);
            nPoints 1000;
        }
        autoWriteSet true;
<!--(if foamFork=="extend")-->
        setFormat raw;
<!--(else)-->
        writeSetOnConstruction true;
        setFormat vtk;
<!--(end)-->
    }
    createMinMaxLineSet2
    {
        $createMinMaxLineSet;
        setName fromMinToMax2;
        set {
<!--(if foamFork=="openfoam" and foamVersion>(5,99))-->
            type lineCell;
<!--(else)-->
            type midPoint;
<!--(end)-->

            axis distance;
            start (-0.01 0 -0.025);
            end (0.141421 0.176777 0.025);
            nPoints 1000;
        }
        autoWriteSet true;
<!--(if foamFork=="extend")-->
        setFormat raw;
<!--(else)-->
        writeSetOnConstruction true;
        setFormat vtk;
<!--(end)-->
    }
    createMinMaxLineSet3
    {
        $createMinMaxLineSet;
        setName fromMinToMax3;
        set {
<!--(if foamFork=="openfoam" and foamVersion>(5,99))-->
            type lineCellFace;
<!--(else)-->
            type midPointAndFace;
<!--(end)-->
            axis distance;
            start (-0.01 0 -0.025);
            end (0.141421 0.176777 0.025);
            nPoints 1000;
        }
        autoWriteSet true;
<!--(if foamFork=="extend")-->
        setFormat raw;
<!--(else)-->
        writeSetOnConstruction true;
        setFormat vtk;
<!--(end)-->
    }
    testLineSetNr{
        $testPlaneArea;
        fieldName testLineNr;
        expression "setNrOfPointsInCell(fromMinToMax)";
    }
    testLineSetNr2{
        $testPlaneArea;
        fieldName testLineNr2;
        expression "setNrOfPointsInCell(fromMinToMax2)";
    }
    testLineSetNr3{
        $testPlaneArea;
        fieldName testLineNr3;
        expression "setNrOfPointsInCell(fromMinToMax3)";
    }
    testLineSetVel{
        $testPlaneArea;
        fieldName testLineVel;
        expression "setHasSet(fromMinToMax) ? U : vector(0,0,0)";
    }
    testLineSetDist{
        $testPlaneArea;
        fieldName testLineDist;
        expression "setDistance(fromMinToMax)";
    }
    testLineSetAverage{
        $testPlaneArea;
        fieldName testLineAverage;
        expression "setValueAverageVector(fromMinToMax,pos())";
    }
    testLineSetMinimum{
        $testPlaneArea;
        fieldName testLineMinimum;
        expression "setValueMinimumVector(fromMinToMax,pos())";
    }
    testLineSetMaximum{
        $testPlaneArea;
        fieldName testLineMaximum;
        expression "setValueMaximumVector(fromMinToMax,pos())";
    }
    calcUZWhole {
        type swakExpression;
        valueType internalField;
        expression "U.z";
        verbose true;
        accumulations (
            size
            weightSum
            min
            max
            weightedMedian
            median
            weightedAverage
            average
        );
    }
    calcUZHalf {
        $calcUZWhole;

        mask "pos().z>0";
    }
};

libs (
    "libOpenFOAM.so"
    "libgroovyBC.so"
    "libsimpleSwakFunctionObjects.so"
    "libswakFunctionObjects.so"
    "libswakTopoSources.so"
    // Needed to decompose on 1.7
    "libcompressibleRASModels.so"
    "libswakPythonIntegration.so"
    // to test plugins
    "libswakMeshQualityFunctionPlugin.so"
    "libswakLocalCalculationsFunctionPlugin.so"
    "libswakRandomFunctionPlugin.so"
    "libswakFvcSchemesFunctionPlugin.so"
    "libswakThermoTurbFunctionPlugin.so"
    "libswakSurfacesAndSetsFunctionPlugin.so"
    // test plugin
    "libswakTestFunctionPlugin.so"
) ;

// ************************************************************************* //
