/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         40;

deltaT          1e-3;

writeControl    runTime;

writeInterval   0.1;
// writeInterval 0.01;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression on;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

// adjustTimeStep  yes;
adjustTimeStep  no;

maxCo           0.5;

libs (
    "libgroovyBC.so"
    "libsimpleRegionSolvers.so"
    "libgroovyStandardBCs.so"
    "libsimpleSwakFunctionObjects.so"
    "libswakFunctionObjects.so"
);

functions {
    readTraction {
        type readAndUpdateFields;
        fields (
            traction
        );
    }
    moveFlap {
        type solidDisplacementRegionSolver;
        meshRegion solid;
        ignore_unimplemented_SimpleRegionSolverFunctionObject::movePoints true;
    }
    displacement {
        type swakExpression;
        valueType internalField;
        region solid;
        verbose true;
        accumulations (
            min
            max
        );
        expression "D";
        ignore_unimplemented_simpleFunctionObject::movePoints true;
    }
    traction {
        type patchExpression;
        patches (
            plate
        );
        verbose true;
        expression "mag(traction)";
        accumulations (
            min
            weightedAverage
            max
        );
        ignore_unimplemented_simpleFunctionObject::movePoints true;
    }
    displacementCopy {
        // needed because paraview can'T handle the stored variables
        type expressionField;
        region solid;
        fieldName DValue;
        expression "D";
        autowrite true;
    }
}

// ************************************************************************* //
